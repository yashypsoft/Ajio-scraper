name: Scrape Ajio Pages

on:
  workflow_dispatch:
    inputs:
      start_page:
        description: 'Start Page'
        required: true
        default: '1'
      end_page:
        description: 'End Page'
        required: true
        default: '23400'
      batch_size:
        description: 'Batch Size (Pages per Job)'
        required: true
        default: '1000'

jobs:
  prepare-matrix:
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
    steps:
      - name: Generate matrix
        id: set-matrix
        run: |
          start_page=${{ github.event.inputs.start_page }}
          end_page=${{ github.event.inputs.end_page }}
          batch_size=${{ github.event.inputs.batch_size }}

          ranges=()
          for ((i=start_page; i<=end_page; i+=batch_size)); do
            end=$((i+batch_size-1))
            if [ "$end" -gt "$end_page" ]; then end=$end_page; fi
            ranges+=("{\"start\":$i,\"end\":$end}")
          done
          
          matrix="{\"page_range\":[$(IFS=,; echo "${ranges[*]}")]}"
          echo "matrix=$matrix" >> $GITHUB_ENV
          echo "matrix=$matrix" >> $GITHUB_OUTPUT

  scrape-pages:
    needs: prepare-matrix
    runs-on: ubuntu-latest
    strategy:
      matrix: ${{ fromJson(needs.prepare-matrix.outputs.matrix) }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.21'
          cache: false  # ✅ Enable caching with a unique key

      - name: Install dependencies
        run: go mod tidy

      - name: Build scraper
        run: go build -o scraper ./src

      - name: Run scraper for page range
        env:
          TELEGRAM_BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}
          TELEGRAM_CHAT_ID: ${{ secrets.TELEGRAM_CHAT_ID }}
          MYSQL_HOST: ${{ secrets.MYSQL_HOST }}
          MYSQL_PORT: ${{ secrets.MYSQL_PORT }}
          MYSQL_USERNAME: ${{ secrets.MYSQL_USERNAME }}
          MYSQL_PASS: ${{ secrets.MYSQL_PASS }}
          MYSQL_DATABASE: ${{ secrets.MYSQL_DATABASE }}
        run: |
          ./scraper --start-page ${{ matrix.page_range.start }} --end-page ${{ matrix.page_range.end }}

      - name: Upload results (if needed)
        uses: actions/upload-artifact@v4  # ✅ Updated to v4
        with:
          name: results-${{ matrix.page_range.start }}-${{ matrix.page_range.end }}
          path: ./results/